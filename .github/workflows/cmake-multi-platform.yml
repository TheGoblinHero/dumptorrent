name: Compile and upload on release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            zipname: dumptorrent_windows_amd64.zip
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            zipname: dumptorrent_linux_amd64.tar.gz

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Zip
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      - if: matrix.os == 'windows-latest'
        run: 7z a ${{ matrix.zipname }} Release/dumptorrent.exe Release/scrapec.exe
      - if: matrix.os == 'ubuntu-latest'
        run: tar -cvzf ${{ matrix.zipname }} dumptorrent scrapec

    - name: Upload
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: gh release upload ${{github.event.release.tag_name}} ${{ matrix.zipname }}
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
